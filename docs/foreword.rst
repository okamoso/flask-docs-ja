※超訳です。

序文
========

Flaskを始める前にこれを読んでください。ここで、プロジェクトの目的とゴールに関するいくつかの質問に対して、また、いつFlaskを使うべきか、使わないべきかという質問にうまくいけば答えられる。

"micro"とはどういう意味か？
-----------------------

“Micro” とはWebアプリケーション全体が一つのPythonファイルに収まる、という意味ではない（実際にはそのようなこともできるが）。また、Flaskが機能性に欠けているという意味でもない。Microframeworkの"micro"は、Flaskがコアをシンプルに、かつ拡張性がありつづけることを目標にしている、という意味である。
Flaskはあなたに対して、なんのデータベースを使うか、などいろいろ決めさせるようなことはしない。
そういった決定というのは、利用するテンプレートエンジンをどれにするといったようなもので、これは簡単に変えられる。その他なんでもあなた次第で、Flaskはあなたが必要とするなんにでもなれるし、あなたが必要としないものにはならない。

デフォルトでは、Flaskはデータベース抽象化レイヤー、フォームを含んでおらず、Flaskはすでにある別のライブラリが扱えるバリデーションやその他のものについて決めていない。

そのかわりFlaskは、Flask自身に組み込んであるかのようにそのような機能を付け加えるエクステンションをサポートしている。

データベース統合、フォームのバリデーション、アップロードの取扱い、様々なオープン認証技術などを多数のエクステンションが提供している。Flaskは"micro"かもしれないが、様々なニーズに対して商用利用ができるようになっている。

コンフィグレーションと慣例
-----------------------------

Flaskは多くのコンフィグレーション値を持っており、実用的なデフォルトが設定されており、始める際にいくつかの慣例がある。

慣例では、テンプレートと静的ファイルはアプリケーションのPythonソースツリー内のサブディレクトリに、テンプレートは`templates`、静的ファイルは`static`に格納されている。

これは変更することができるが、特に初めて最初は通常変えないほうが良い。

Flaskと成長する
------------------

一度Flaskを始めて動かしたら、あなたのプロジェクトを商用まで統合するために、様々な種類のエクステンションがコミュニティで利用可能であることに気づく。

Flaskのコアチームはエクステンションのレビューを行っており、認められたエクステンションは、今後のリリースでも動かなくならないように保証している。

あなたのコードベースが成長していくにつれ、あなたは自分のプロジェクトに適したデザインを自由に決めることができる。
Flaskは、いちばんPythonが提供すべきとてもシンプルな糊の役割をするレイヤーを提供し続ける、

あなたはSQLAlchemyや他のデータベースツールのより発展したパターンを実装できるし、もし適切ならリレーショナルでないデータベースのデータ永続性を提供できるし、
WSGI、Python webインターフェース向けに提供された、フレームワークにとらわれないツールに比べて利点があるようにもできる。

Flaskは振る舞いをカスタマイズできる多くのフックを含んでいる。もしもっとカスタマイズしたい場合は、Flaskクラスを継承して使う。
もしこれに興味があるなら、becomingbigの章を読んでほしい。
もしFlaskのデザイン原則に興味があるなら、デザインの章に進んでほしい。

インストール、クイックスタート、高度な序文に続く
